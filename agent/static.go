// Code generated by go-bindata.
// sources:
// static/css/app.css
// static/index.html
// static/js/app.js
// DO NOT EDIT!

package agent

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssAppCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xdb\x8a\xc3\x36\x10\x7d\x8e\xbf\x42\x65\x59\xd8\x0d\xb1\x63\x27\x7b\x69\x15\x0a\xdd\x96\xd2\x2d\xb4\xf4\xa9\x1f\xa0\x58\x63\x67\x58\x59\x63\x24\x39\x97\x96\xfd\xf7\x22\xf9\x52\xc7\xf1\xd2\x86\x40\xe4\xe8\x8c\xce\xd1\xcc\x99\xf1\xc1\x55\x6a\xc5\xf6\x24\x2f\xec\xef\x68\x51\x90\x76\x71\x21\x2a\x54\x17\xce\x7e\xa2\xc6\x20\x98\x15\xab\x48\x93\xad\x45\x0e\xbb\x68\x51\x0b\x29\x51\x97\x9c\xa5\xbb\x68\x51\x09\x53\xa2\x6e\xd7\x57\xa1\xef\xa0\x8e\xe0\x30\x17\xbb\x68\x41\x47\x30\x85\xa2\x53\x7c\xe1\xec\x80\x52\x82\xde\x45\x9f\x51\xd4\x53\x4a\xb4\xb5\x12\x17\xce\x0a\x05\x67\x7f\x26\xea\xf8\x00\x58\x1e\x1c\x67\x59\x9a\x1e\x0f\x01\x6d\x41\x41\xee\x3c\x3e\x3e\xc1\xfe\x03\x5d\x2c\xea\x1a\x84\x11\x3a\x07\xce\x34\x69\xf0\xa8\x24\x27\xed\x40\xbb\xb9\x73\xfd\x4f\x2c\xd1\x40\xee\x90\x34\x67\x39\xa9\xa6\xd2\xdd\x06\x67\xcf\x9e\x66\xbd\xfc\xfe\xbf\x3f\xcb\x75\x47\x64\x48\xd9\x90\xb4\x70\x80\xcf\xc1\x09\xa5\x3b\x70\x96\x3d\xa7\xb5\xa7\x74\x70\x76\xb1\x50\x58\x7a\x3a\xd0\x0e\xcc\x38\x81\x59\x0b\xda\x93\x91\x60\x62\xd3\xdd\xb8\x3e\x33\x4b\x0a\x25\xbb\x7b\x7b\x7b\xdb\x0d\x97\x0a\x5c\x89\x43\xa7\x20\x41\x5d\x50\x52\x20\x28\xe9\xd9\x03\x89\x84\x9c\x8c\x68\x2f\xd6\x68\x09\x46\xa1\x86\xdd\x34\x7c\x26\xb0\x53\xa7\xa0\x70\x53\xb4\x75\xc2\x35\xb6\xc3\xdb\x5a\xe8\xc1\x20\x16\xff\x02\xce\xd2\xe4\x3b\xa8\xa6\x41\xa6\xd1\xb1\x0f\xb4\xf3\xe0\xfe\xf6\xb1\x27\xe4\x6c\x13\x52\xe0\x4f\xa8\xc0\x5a\x51\x42\x08\xeb\x31\x8e\x6a\xce\xb6\x03\xa4\xc1\x1e\x35\x55\xdf\xe7\xd6\xbb\xaa\x71\x8e\x82\xd2\xbe\x16\x69\x77\x80\x8f\xcf\x0f\x90\x7f\xec\xe9\xcc\x94\xd8\x83\xf2\xa8\xbc\x31\x96\x0c\x67\x35\xe1\x70\xc6\xff\x75\x41\xb8\xb6\x40\x0d\x26\xa8\x26\x8b\x6d\x01\x0c\x28\xe1\xf0\x08\x83\xb7\xb2\xc0\x3f\xa0\x13\x90\xe8\x28\x04\x8d\xcd\xbe\xe9\x95\xde\xfd\xbb\x3f\x6e\xaa\xa1\x0b\xbf\xc1\xaa\x26\xe3\x84\x76\xbb\x31\xad\xd8\x5b\x52\x8d\xf3\xb4\x21\x73\xde\x90\x9d\xab\xd2\xe0\x33\xe7\xa8\x6a\xd7\x6d\xf6\xfd\x6a\xd4\x69\xf7\x13\x95\x8a\xca\xeb\x3c\xde\x4f\x3a\x7e\xea\xe4\x99\xcb\xf4\xee\x0e\x82\xa6\xde\x1e\x26\x03\x67\xa2\x71\x34\x43\xdf\xbb\x6e\xe8\x65\xdf\xe8\xb7\xb8\x84\x1a\x17\xb0\x7e\xb1\x9a\x6e\x82\x31\xed\x26\x18\x73\xb3\x29\x4a\x3f\x2e\xc2\x76\xbb\x1c\xb3\xa1\x0e\x6d\x34\xaf\x2b\x90\x7a\x07\x91\xf2\x06\xba\x4b\xd3\x4d\xfa\x2a\xbf\x02\x7b\x11\x23\xf0\xb7\x2f\xd9\x53\x9a\x7e\x05\x1e\x94\x74\xf0\xd2\xc0\x25\x60\x0b\x52\x8a\x4e\x09\xe6\xad\xc5\x67\x6b\xdf\x95\x7c\xdb\xe7\xbf\xad\x7a\xff\x28\xf2\x8f\xd2\x50\xa3\x25\x67\xa6\xdc\x8b\x87\x74\xc5\xba\x6f\x92\x3d\x8e\x6b\xba\x0d\xf8\xa1\x9c\xed\x63\xe7\x85\x4d\x76\x35\xb9\x84\xc4\xc6\x72\xf6\xdc\x35\xea\x7a\xf9\xfb\x1f\x3f\xfe\xfa\xdb\xcf\xcb\x75\xf4\x43\x05\x12\x05\x7b\xa8\xc4\x39\xee\x62\x5f\xb7\x2f\xf5\xf9\xd1\xab\xef\x5f\x00\x5f\x4f\xe6\xcf\x68\x71\x35\x68\x27\x5e\x9c\x9f\xaf\x93\x81\xda\x3a\x66\xf8\xb7\xcf\xc7\x8d\x17\x3f\xc3\xf8\x7f\xff\xf3\x97\x2b\xdd\xa8\x7b\xdd\xd9\xd3\x53\xda\x09\x1f\xbf\x65\x6e\xc4\x1b\x3a\x8d\x94\x5f\x75\xd2\x55\x33\x4c\x74\xb5\x1d\x39\xab\xea\x9f\x00\x00\x00\xff\xff\x4b\x91\xe3\xb4\xa2\x07\x00\x00")

func cssAppCssBytes() ([]byte, error) {
	return bindataRead(
		_cssAppCss,
		"css/app.css",
	)
}

func cssAppCss() (*asset, error) {
	bytes, err := cssAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/app.css", size: 1954, mode: os.FileMode(420), modTime: time.Unix(1470496855, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4d\x6f\xdc\x36\x10\x3d\x2b\xbf\x82\xd6\x21\x9b\x00\xb6\x58\x1b\x2d\x10\x2c\xb4\x0a\x0a\x27\x3d\x15\xa8\x91\xb6\x87\xa2\xe8\x81\x22\x47\xd4\xac\x29\x52\x20\x29\x7f\x60\xe3\xff\x5e\x90\xfa\x58\x69\xbd\x6b\x27\x05\x7a\x5a\x49\x6f\xde\xcc\xbc\x99\xe1\x2c\xf3\xb3\x4f\xbf\x5d\xff\xf1\xd7\xcd\x67\x52\xfb\x46\x15\x6f\xf2\xf0\x43\xb4\xbc\x60\x6d\xbb\x49\xef\xa1\x6c\xad\xe1\x69\xf1\x26\xc9\x6b\x60\xa2\x78\x93\x24\xb9\x47\xaf\x20\x98\x94\xa8\xc5\x26\x15\xcc\xb3\xec\xda\xe8\x0a\x65\x76\x63\x8d\xb4\xac\xf9\xd9\x4a\xf7\xf7\x0f\xff\xa4\xc5\xc0\xcf\x69\xe4\x44\xb6\x42\x7d\x4b\x2c\xa8\x4d\xea\xfc\xa3\x02\x57\x03\xf8\x94\xd4\x16\xaa\x4d\x4a\x29\x17\x7a\xeb\x32\xae\x4c\x27\x2a\xc5\x2c\x64\xdc\x34\x94\x6d\xd9\x03\x55\x58\x3a\xea\xa0\x61\xda\x23\xbf\xe8\x90\x5e\x65\x57\xd9\xd5\xf4\x25\x6b\x50\x67\xdc\xb9\xf4\xd5\x20\xdc\x39\xca\xda\x76\x34\xce\xe9\x20\x2c\x2f\x8d\x78\x8c\x6c\x24\x5c\x31\xe7\x36\xa9\x32\xfc\x96\x54\x46\x29\x73\x4f\x90\x1b\x9d\x16\x39\xc5\x68\xe2\x80\x7b\x34\x7a\x34\xe4\x46\x7b\x6b\x54\x1f\x3d\xc9\x05\xde\x8d\x48\x87\xa4\x32\xb6\xe9\x81\x24\xaf\x2f\x47\x20\x56\x24\xfd\xce\x32\xd6\x97\x83\x9f\x65\x84\xbe\x23\xa8\x2b\x43\x2a\x04\x25\x86\x68\xc9\xef\x9e\xf9\xce\xf5\x0c\x2a\xf0\xee\x28\x39\xd2\x5c\xb4\x5c\xb2\x67\x75\x40\x59\x7b\x8d\x5a\xf6\x55\x08\x49\xef\x85\x6b\xe0\x1e\x04\xf9\x48\x56\xd2\x02\xe8\x15\x59\x93\x95\x05\xb1\x9a\x8a\x15\x5c\xb9\x96\xe9\xbd\xd6\x05\xeb\x7a\x7c\x89\xcc\x4f\xe8\x26\x74\x95\xf6\xec\x24\xc6\x43\x7e\xbb\x49\x2d\x0c\xe8\xbb\xf7\x23\x58\xcc\x29\x39\x0d\x91\xc6\xa8\x41\xa8\x96\x17\xae\x36\xf7\xb3\xa0\xa3\xbe\x99\x40\x5e\x03\xbf\x6d\x98\xbd\x7d\x26\x30\xb6\xe5\x4b\xa7\xa3\xfa\x17\x35\x1e\x8a\x3c\x64\x0e\x8f\x91\xfb\xf9\x01\xa3\xbe\xa2\x7f\x58\x66\xbd\xef\xd4\xa2\x55\xb6\xd3\x17\xa1\x4d\x2e\x3d\xa2\x89\xbc\x7d\x4b\xe6\x01\xf7\x1a\x83\xb3\xbc\x2c\x2a\x63\x73\x5a\x16\xa4\x4f\x92\x49\x33\x24\xf8\x67\xeb\xb1\x81\xa0\x23\xa6\x30\x0f\x3e\x71\x5b\x14\x91\xbb\xdb\xf5\x31\x6e\x50\x90\xa7\xa7\x45\x9e\xb3\xe9\x3a\x18\xb4\x29\xd7\x0a\x15\xb8\x4c\x81\x96\xbe\x26\x05\xb9\x4c\x8f\x68\x7c\x61\x96\x93\x5f\x02\xff\xe5\x12\x85\xc3\xb6\xe0\xe4\x0e\x14\x70\x3f\xc3\xcb\xce\xfb\xa1\xc3\xa6\x0d\x47\xd8\x6d\xd2\x2a\x1c\x51\x52\x11\xd4\x24\x26\x19\xd1\xc6\x88\xb0\x3f\x50\xb7\x9d\x77\x59\xf8\x1e\x8b\x14\xfd\xbd\xae\xfa\x75\x3d\xbf\x1a\x29\x51\xcb\x6f\x39\x9c\xcb\x53\xb9\x34\x88\x93\x5b\x9a\x87\xd9\x50\x87\x8c\x89\x7f\x6c\x61\x98\xeb\x80\x12\x14\x61\x9d\x49\xd3\xf9\x23\xea\x42\x83\xb2\x00\x4d\x4e\x14\x2b\x41\x85\xb2\x4c\xac\xc2\x79\x61\x3a\x9f\xd3\x08\xbd\x32\xab\xdf\x9f\x18\x58\x7b\x2a\xb1\x00\x9d\x48\x2c\x42\xce\x0b\xb0\xf6\xff\x4a\x8c\x49\xd0\x27\x6b\xd6\x83\x27\x92\x1b\xc0\xf8\x73\x32\xbb\xd3\xad\x5f\x76\xbd\x9f\xdb\xe7\x83\x7c\x64\x43\x2a\xc3\xc4\xbb\xf7\xf3\x25\xb6\x1b\xac\x92\x00\xa1\x96\x6b\xd2\x5b\x65\xa8\xe5\x39\x11\xe8\x58\xa9\x40\x4c\x5f\x41\x90\xaf\x5f\xc9\xd9\xb4\x5c\xce\x47\x7a\x6b\xb1\x61\xf6\x71\x4d\xce\x26\xcb\x73\x12\x37\xe2\x9a\x90\x3d\x7b\x30\x7f\x4a\x8b\x2f\xf1\xd3\x6e\x37\x41\x1f\x57\x20\x56\xeb\xd5\x2a\xac\x8f\x5e\xc1\xf1\x32\x84\xe2\xc7\x91\xd8\x0b\xd6\x20\x99\xc7\x3b\x20\x0d\x38\xc7\x24\xcc\xd6\xe0\xe8\x3e\x4c\xc3\x6e\x47\xf6\xaf\x8b\x35\x35\x3d\x85\x63\x1c\xff\xbe\xe3\x4b\xc3\x70\xf1\x3f\x3e\x75\x74\xde\x0f\x10\xe8\x8d\x25\x01\x67\xa8\x61\x1c\xc8\x7d\xae\x11\x4f\x8b\x23\xd1\x92\xbc\xb5\xb0\xbf\x51\xc8\x99\x93\x79\x8b\x4c\xe7\xd7\x07\xc7\xf1\x9c\x80\xb5\xeb\x83\xa3\x70\x4e\xe2\x40\xad\x9f\x8d\xe1\x53\x88\xde\xda\xfe\x96\x45\x83\xaa\xfe\xa6\xc2\x2d\xb6\x9e\x38\xcb\xbf\xe1\x7e\xc5\xb4\xec\x14\xb3\xd9\xd6\xd1\xcb\xec\xa7\xec\xc3\xf4\x21\xdc\xae\xb6\x2e\x6e\xc0\xe8\xef\x3f\xb8\xe6\x40\x2f\xb3\xab\xec\xc7\xf0\x14\x7c\x11\x5e\x33\xeb\xc0\x6f\xd2\xce\x57\x1f\x5e\x70\xbd\x75\xf4\x0e\x94\x79\x78\x39\x81\x6d\x7f\xab\x3b\xb0\xc9\x69\x7f\xab\xcb\x69\x7f\xbd\xfd\x37\x00\x00\xff\xff\xea\xa7\x67\x38\xef\x0a\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 2799, mode: os.FileMode(420), modTime: time.Unix(1470496955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x57\xe9\x8f\xe3\xb6\x15\xff\x3e\x7f\xc5\x5b\xc1\x88\xa5\x1d\x2d\xe5\x49\x0f\xa0\x76\xd5\x45\xb0\xd9\xa2\x01\xb2\x6d\xd1\x09\xf2\xc5\x71\x01\x5a\x7a\x92\xb8\x4b\x91\x2a\x49\xf9\xc8\xda\xff\x7b\x41\x52\x07\xed\x99\x36\xf3\xc5\x14\xdf\xc1\x77\xfc\xde\x31\xd9\x5b\xa8\xb9\xdc\x53\x0e\x8b\x94\x16\x08\x6f\xb3\x87\x87\x03\x55\x80\x25\x33\x52\x41\x0e\xb4\x40\x62\x3f\xe2\xc8\x5f\x45\xc9\xe6\xc1\x9f\x88\x46\xf3\xdc\xc8\xe3\x3f\x15\x13\xe6\x13\x55\x35\x13\x71\x45\xb9\xc6\x99\x63\xb1\xe7\xb2\xf8\xf2\x5c\x28\xc9\x39\x13\x35\xe4\xf0\x83\xa8\x98\x60\xe6\x1c\x2a\xf9\xa9\xc1\x16\xe3\x88\x16\x98\x19\x7b\xcc\x6a\x66\x9a\x7e\x7f\xfb\xd2\x77\xbd\x91\x5e\xd1\x47\x77\xf7\x83\x30\xf2\x67\x86\xc7\xd8\xa8\xde\xbe\xe8\xac\xa6\x5d\x67\x4d\x16\x75\xcf\xa9\x22\xad\x2c\x7b\x8e\xf1\xf2\x88\xfb\x4e\xc9\x62\x99\xc2\x76\x67\x39\x69\xd7\x91\x92\x29\x2c\x0c\x3b\x60\x1c\x71\x59\x47\x29\x54\xbd\x28\x0c\x93\x22\x4e\xe0\xeb\x03\x80\x42\xd3\x2b\xe1\x8e\xf6\x43\x1b\xc5\x0a\xb3\x86\xe5\x87\x65\xea\xae\x38\x13\x5f\xd6\xb3\x90\x2e\x64\x87\x29\x20\xc7\x36\x05\x6a\x8c\xd2\xc9\x20\x0b\xe0\xc2\x09\x39\x1c\x99\x28\xe5\x91\xd8\xa3\xe5\xdb\xae\x76\x9b\x80\x43\x40\x0e\xab\xf0\x42\x3b\x67\xc3\x5b\xf7\x08\xa9\x24\xe7\xf2\x08\x39\x58\xc7\x47\x92\x55\x48\xa4\x88\x97\x5e\x6a\x19\xf8\x83\x07\x14\x66\xb6\x26\x54\xfe\x3d\xab\x2a\xc8\x21\x46\xe2\xbf\xff\x86\xac\x6e\x0c\xbc\x03\x24\x05\x67\x28\x8c\xbf\x48\x36\x37\xb2\x1d\xaa\x02\x85\x81\xfc\x46\x4b\x0e\x2b\x78\x0f\x4f\xab\x15\xac\x67\x85\x3f\xc9\x2e\x9b\x99\x92\xb7\x4f\xab\xd5\xad\xae\xc9\x99\x49\x69\x9e\xc3\x0d\x17\xab\xe2\x91\x29\xcf\x6f\x42\x90\x0c\x49\x9a\x79\xef\x02\xe4\x0f\x33\xb9\x94\x45\xdf\xa2\x30\xe4\x3f\x3d\xaa\xf3\x33\x72\x2c\x8c\x54\x71\x34\x48\x10\x56\x48\x11\x25\x44\x9b\x33\x47\x52\x32\xdd\x71\x7a\x9e\xd4\xc0\x7b\x58\x3a\x34\x2f\x61\x0d\x4b\x21\x05\x2e\x47\xcd\xd7\x29\x40\x63\xd0\x07\x99\x1f\x65\x1d\x87\x91\x67\x55\x7c\xeb\x40\x10\x27\xc8\xe1\x4f\xc3\xdf\xa4\x77\xf8\x1d\xf1\x6c\x93\x8c\xc2\xc4\x1e\x48\x89\xcb\xb7\x42\xcd\x7e\x45\x9b\xef\xf1\xc5\xe4\x16\x2e\x0b\xcb\xd5\x77\x25\x35\xf8\x02\x15\x29\x94\xd4\xd0\xd0\xc2\x2c\xdb\xcb\x5e\x94\x50\xf4\x4a\xd9\x74\x30\x51\xe2\x09\xf6\x67\x68\x99\x00\x2e\x6b\x40\x61\xd4\x79\x62\xb7\xa0\xfd\x44\x4d\x43\x5a\x7a\x8a\x85\x57\x47\x7e\x94\xf5\x3f\xaa\x4a\xa3\x79\x37\x7e\x7e\xa2\xa7\x67\xf6\x2b\x06\x38\x3a\x36\x8c\xa3\x2f\xdd\xe0\x75\x8f\x89\x16\xf2\x49\xd1\x56\xec\x36\x01\x99\x55\xf1\x9b\x36\x81\xbd\x42\xfa\x25\xbc\x17\x8f\x8f\x77\x6c\x2d\x59\x28\x14\x25\x2a\x2c\x13\x28\xa4\x30\x4c\xcc\xd5\x32\x55\x41\x47\xad\x07\x13\x2e\x0a\x85\xd4\xe0\xc7\x21\xcc\x91\x25\x47\x49\x28\x64\x6f\x88\xc1\x93\xf9\x20\x85\xf1\x35\xd0\x92\xfd\x0b\x8e\x82\x53\xad\xff\x4e\x5b\x74\xf4\x2e\xa4\x23\xa1\x5d\x87\xa2\xfc\xd0\x30\x5e\xc6\x96\xfb\xe6\x81\xc0\xec\xbb\x0a\x9f\xe1\x00\x21\xba\xee\x31\x68\x99\xae\x0f\xd7\x57\xda\x1c\xad\xe5\xcb\x36\xe7\x7b\x01\xe5\xd6\xd2\xed\x36\x6a\x75\x94\x3e\xad\x56\xab\x5d\x0a\xdb\x48\x47\xe9\x1f\xfd\xa9\x9d\x4e\x4d\x94\x7e\xfb\x7b\x77\x2a\xa3\xf4\x77\x4f\x9e\x6a\x9a\x28\x7d\xfa\x76\xe7\x32\xe5\xba\x70\x2d\x6d\xd9\x4c\xbd\xd1\xa8\x31\xc9\x96\x7a\x80\x1c\x1e\x05\x1e\xe1\x7b\x6a\x30\x4e\xde\x4d\x47\xcb\xe7\x9d\xa8\xa4\x8a\x2d\x2b\x73\xdd\x0f\x18\xfc\xd9\x1b\x49\x38\x8a\xda\x34\x1b\x60\x8f\x8f\xb7\xfd\x55\xbb\x6e\x44\x39\x6e\xd9\x04\x18\x56\xc5\x07\x2b\xb9\x7d\xda\x8d\xad\x02\x0e\xf0\x08\x3a\xec\xbc\x23\x80\x95\x85\x7d\x7c\xc8\x1c\xf7\x1c\xca\x69\x10\x44\xef\x22\x7b\x7b\xdd\xfc\xef\xd9\x10\x7d\x17\xbd\x3e\x1b\x52\xc0\x57\x87\x82\x36\x2a\x6c\xf8\x45\x83\xc5\x97\x30\x70\x61\x69\xa0\x83\x5d\x4c\x6b\xe9\xe2\x14\x80\xc6\x0e\x50\xd6\xa2\xec\x4d\xec\x34\xa4\xb6\x7f\xae\x92\xfb\x26\xe2\x68\x33\x5e\x34\x59\x1c\xa9\x29\x9a\xd8\xd9\x45\x68\x2d\x03\x6c\xe8\xf0\x65\x6d\xec\x1a\xa0\x7f\x03\x68\xaa\x17\xf1\x24\xbf\x50\x52\x9a\x67\x3f\x12\x17\x8d\x31\x5d\x0a\x0b\xe3\x6d\x0c\x60\x37\x8f\x44\xcb\x0e\x39\xcc\x62\x23\x92\x98\xe8\x7a\xe3\x72\x4b\xa6\xa3\xb7\x4c\x37\xf2\xb8\x86\xaf\xb2\x37\x6b\x5b\x25\x29\xa0\x52\xc3\x89\xd6\x28\xcc\xda\x6d\x22\xd7\x31\x65\x59\xa6\x51\x1d\x50\xb9\xc6\x32\x28\xef\x95\x9d\xae\x5c\x16\xd4\x1a\x4d\x3a\x6a\x1a\x41\x5b\x24\x0a\x3b\x4e\x0b\x8c\xb3\xed\xbf\x7f\xc9\x76\x8f\x8b\x2c\x8d\xa2\x04\x1e\x21\xd2\x67\x51\x44\xa3\x69\x56\x91\x33\x6c\x38\x7c\xbd\x8e\x14\x8b\xa9\x03\x72\x79\x22\x5a\x63\xdc\x2b\x3e\xb4\x59\x4b\xd7\x44\x61\x21\x85\xc0\xc2\xbc\x96\xe9\x03\x51\x68\xd4\xd9\xa7\xc9\x2b\x24\x52\xf8\xee\xfd\x1a\xbf\x26\x0b\xda\x75\xfc\x3c\xe6\x55\x93\x05\xb6\xcc\x04\x0d\x7f\x7a\x79\xd2\x56\x34\x54\xd4\x37\xda\x06\x83\x6c\xa7\x1c\xd5\x4e\x57\x90\xc3\x74\xde\xbc\xf2\xe6\x10\xdd\xae\x37\x50\x31\x8e\xae\xd5\xa2\x30\x1a\x98\x30\x72\xd8\x22\xc7\x78\x3b\x9b\x3e\x8e\x8b\xe5\x4b\xe7\x87\xd8\xb9\xde\xff\x57\xc6\x51\x6f\x7d\xd2\x89\xd5\xbc\x83\xcb\x05\xa2\x68\x33\xb1\xda\x11\x65\x57\x29\xbf\x21\xd6\x68\x7e\xa6\xbc\xc7\x31\x12\xac\x8a\x1d\xc3\x9b\x3c\x87\x43\x32\x6e\x49\xd3\x36\xe9\x79\x0f\x29\xbc\x7b\x0a\xdd\x68\xa8\x28\xad\x13\x2e\x44\xfa\x21\x28\x93\xc8\x59\xf5\x41\x8a\x8a\xd5\xc3\x4f\xaf\x1c\x70\x9c\xa5\x61\x67\xb5\xd6\xea\x39\x94\xee\xd3\xfa\xeb\x7e\x2f\x17\xd8\xee\x26\x13\x07\xea\xd0\xd7\xfc\xf2\x63\x59\xee\x09\x7f\xb1\xf7\xdf\x7c\x03\x6f\x82\x80\x24\x73\x91\x06\xb7\x0e\x92\x4e\x76\xea\x72\xae\x08\x06\xf4\x8d\xde\x04\x12\xf7\xa6\x8f\x6a\xed\xac\xf5\xdf\xe1\x9a\x95\x65\x78\x32\x28\x34\x93\x42\x43\x5c\x34\x52\x6a\x84\x4a\xc9\x16\x6c\x9d\xeb\x75\x36\x2c\xef\xa4\x90\x6d\x46\x3f\xd3\x93\x54\x75\xe6\x36\x7b\x85\x98\xb5\x54\x1b\x54\x19\x67\x7b\x77\xd7\xca\x12\x93\x29\xa1\xf6\x0b\x72\xc8\x7e\x21\xb1\x91\x2d\xbf\x7c\xd6\x52\x5c\x3e\xeb\x4b\xa1\xf5\xa5\x31\x2d\xbf\xd4\xf2\x72\xa6\xef\x5b\x7e\xd1\xcd\xe5\xd4\xf2\x64\x91\x11\x83\xda\x0c\x56\xbf\x87\x7f\x61\xfd\xf1\xd4\x91\xc5\x93\xdd\xd0\x98\x60\xcb\xd1\xe4\x42\x2a\x37\x06\xa5\xd0\xa3\x6b\xfe\xb1\x3c\x87\xe5\xb9\xe5\xcb\x64\x7c\x7c\x79\xa6\x2d\x5f\x6e\x5e\x72\xd5\x32\x60\xaa\x25\xa7\xa2\x1e\xd8\x66\x00\x3e\xa3\xd6\x0e\xd0\x16\x61\x9f\x64\x39\xfc\x4f\x63\xa5\xb2\xe8\xd1\x39\xeb\x45\xc2\x4a\x18\xca\x28\xf1\x00\x2c\x64\xdb\x32\x33\x00\x70\xe8\x17\x5c\xd2\xf2\xf5\xe2\xf7\x34\xe2\xff\xb3\x9a\x97\x85\x89\x80\xae\x42\x44\xcf\xb9\x27\xb8\x5e\x4c\x3a\xa9\x4d\xbc\x2c\x06\x0c\xdb\x26\x31\xe2\xc8\x06\x72\x1d\xa2\x29\x1d\x87\xc7\x50\xd5\xeb\x97\xe5\xe6\x21\x96\x10\xd3\x60\x30\x01\x66\x6c\xce\xc6\xdc\x6f\x34\xe3\x48\xb8\x91\xba\xe3\x77\x5d\x7c\x03\xd7\x14\xfe\x30\x0f\xb5\x6b\x80\x58\x85\xba\x7b\xed\x31\xe7\xb9\x25\xba\xfe\xbc\x19\xad\xac\x98\xa0\x9c\x9f\xff\xaf\xa1\x3e\x9c\xfe\xe5\x87\x79\xe4\x5d\x37\x6e\xda\xfd\x37\x00\x00\xff\xff\xab\x21\x85\x61\x31\x0f\x00\x00")

func jsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_jsAppJs,
		"js/app.js",
	)
}

func jsAppJs() (*asset, error) {
	bytes, err := jsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/app.js", size: 3889, mode: os.FileMode(420), modTime: time.Unix(1470559103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/app.css": cssAppCss,
	"index.html": indexHtml,
	"js/app.js": jsAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"app.css": &bintree{cssAppCss, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"js": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{jsAppJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

