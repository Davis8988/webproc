// Code generated by go-bindata.
// sources:
// static/css/app.css
// static/index.html
// static/js/app.js
// DO NOT EDIT!

package agent

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssAppCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xed\x6e\xac\x36\x10\xfd\xbd\x3c\x85\xab\xa8\xd2\xbd\x51\x20\xb0\x9b\xfb\x51\x56\x95\x9a\x56\x55\x53\xa9\x55\x7f\xf5\x01\x0c\x1e\xd8\x51\x8c\x07\xd9\x66\x3f\x5a\xed\xbb\x57\xb6\x81\x00\x4b\xd4\x1b\x45\x5a\x83\xcf\xf8\x1c\xcf\x9c\x19\x0e\xb6\x91\x0f\xac\x20\x71\x61\xff\x46\x9b\x8a\x94\x8d\x2b\xde\xa0\xbc\xe4\xec\x17\xea\x34\x82\x7e\x60\x0d\x29\x32\x2d\x2f\x61\x1f\x6d\x5a\x2e\x04\xaa\x3a\x67\xe9\x3e\xda\x34\x5c\xd7\xa8\xc2\x7a\x16\xfa\x02\xf2\x08\x16\x4b\xbe\x8f\x36\x74\x04\x5d\x49\x3a\xc5\x97\x9c\x1d\x50\x08\x50\xfb\xe8\x1a\x45\x03\xa5\x40\xd3\x4a\x7e\xc9\x59\x25\xe1\xec\xce\x44\x15\x1f\x00\xeb\x83\xcd\x59\x96\xa6\xc7\x83\x47\x1b\x90\x50\x5a\x87\x8f\x4f\x50\xbc\xa2\x8d\x79\xdb\x02\xd7\x5c\x95\x90\x33\x45\x0a\x1c\x2a\xe9\x30\x29\x3a\x6b\x49\x39\xe4\x09\x85\x3d\xe4\xec\x6b\xda\x9e\xdf\x84\xc7\x12\x2a\x77\xf2\x27\xf7\xd2\x85\x94\xa4\x2c\x28\xbb\x26\xc5\xfd\xc4\x02\x35\x94\x16\x49\xe5\xac\x24\xd9\x35\xaa\xdf\xc8\xd9\x27\x77\xc0\xe3\xfd\x8f\xff\xff\x77\xff\xd8\x13\x69\x92\x66\x22\x2d\xdb\x06\x6d\x16\xce\x36\xe6\x12\x6b\x47\x02\xca\x82\x9e\x66\x3a\x0b\xa0\x82\xb4\x00\x1d\xeb\x3e\x35\xed\x99\x19\x92\x28\xd8\xdd\xf3\xf3\xf3\xdb\x55\x3c\x43\x62\xd1\x4a\x48\x50\x55\x94\x54\x08\x52\x38\x4e\x4f\x22\xa0\x24\xcd\xc3\x75\x3a\x25\x40\x4b\x54\xb0\x5f\x86\xaf\x04\xf6\xea\x5c\xf6\x16\x68\xd3\x72\x95\x98\x86\x4b\x09\x7a\xf4\x90\xc1\x7f\x20\x67\x69\xf2\x03\x34\xcb\xc3\x75\xa7\x62\x63\xb9\x35\xeb\xe0\x45\xa1\x42\x86\xdc\x09\x0d\x18\xc3\x6b\xf0\x61\x03\xc6\x52\x9b\xb3\xdd\x08\xe9\x70\x40\x2d\x75\x0f\x59\xbd\x7a\x50\x79\x80\xf2\xb5\xa0\x33\x93\xbc\x00\xe9\xb0\x65\xa7\x0d\xe9\x9c\xb5\x84\x03\xf0\x9b\x4b\xeb\xef\xc6\x51\x85\xeb\xb7\x64\x30\xe4\x57\x83\xe4\x16\x8f\x30\x1a\x26\xf3\xfc\x23\x3a\x01\x81\x96\x7c\xd0\xd4\xf4\xdb\xb4\xbf\xcf\xdd\xdb\xfe\xb4\xb9\xc6\x6e\xfc\x0e\x9b\x96\xb4\xe5\xca\xee\xa7\xb4\xbc\x30\x24\x3b\xeb\x68\x7d\x7a\x5c\x73\xf6\xa6\x49\xbd\x8d\xac\xa5\x26\xac\x43\x8a\xdd\x6a\xd2\x71\xdf\x2f\x54\x4a\xaa\xa7\x96\xf5\x80\x59\xe7\x2f\x8d\xba\x72\x99\xc1\xbc\x5e\xd0\xd2\xba\xe3\x84\xc8\x19\xef\x2c\xad\xd0\x3b\x8b\xcd\x1a\xd4\x35\xfc\x2d\x2e\xa1\xce\x06\x3b\x52\x67\x1f\x96\x9b\xa0\x75\xd8\x04\xad\x6f\x36\x79\xed\x66\x80\xdf\x0e\xcb\x29\x1b\x2a\xdf\x25\xeb\xba\x3c\xa9\x73\x10\x49\x67\xa0\xbb\x34\xdd\xa6\x5f\xc4\x7b\x60\x27\x62\x02\xfe\xfa\x39\x7b\x4a\xd3\xf7\xc0\xa3\x92\x1e\x5e\x6b\xb8\x78\x6c\x45\x52\xd2\x29\xc1\x32\x0c\xba\xd5\xda\xf7\x25\xdf\x0d\xf9\x0f\x55\x1f\x1e\x79\xf9\x5a\x6b\xea\x94\xc8\x99\xae\x0b\xfe\x21\x7d\x60\xfd\x7f\x92\x7d\x9c\xd6\x74\xe7\xf1\x63\x39\xc3\x63\xef\x85\x6d\x36\x1b\x4c\x5c\x60\x67\x72\x36\x4c\xd6\xc7\xfb\x3f\xff\xfa\xf9\xf7\x3f\x7e\xbd\x7f\x8c\x7e\x6a\x40\x20\x67\x1f\x1a\x7e\x8e\xfb\xd8\x2f\xbb\xcf\xed\xf9\xa3\x53\x3f\x7c\x08\xde\x1f\xb7\xd7\x68\x33\x9b\x9e\x0b\x2f\xae\x8f\xcf\xc5\xbc\x0c\x8e\x19\xdf\x0e\xf9\xb8\xf1\xe2\xd5\xcf\xf4\x97\xbf\x7f\x9b\xe9\x46\x35\xe8\xce\x9e\x9e\xd2\x5e\xf8\xf4\xd3\x71\x23\x5e\xd3\x69\xa2\x7c\xd6\x49\xb3\x66\x58\xe8\xea\xbf\x4e\x6b\xaa\xfe\x0b\x00\x00\xff\xff\xfe\x13\xcc\xd2\xaa\x07\x00\x00")

func cssAppCssBytes() ([]byte, error) {
	return bindataRead(
		_cssAppCss,
		"css/app.css",
	)
}

func cssAppCss() (*asset, error) {
	bytes, err := cssAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/app.css", size: 1962, mode: os.FileMode(420), modTime: time.Unix(1470571514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x4d\x6f\xdb\x38\x13\x3e\x3b\xbf\x82\xe5\xc5\x0d\x10\x4b\x6f\x82\x77\x81\xc2\x90\x55\x14\x69\xf7\xb4\xc0\x06\xcd\x5e\x16\x45\x0f\x34\x39\xa2\x69\x53\xa4\x40\x52\x4e\x0c\xd7\xff\x7d\x41\x52\x92\x25\x25\xb6\x93\x05\xf6\x64\x9a\xcf\x7c\x3e\x9c\x19\x52\xd9\x87\xaf\x7f\xde\xff\xf5\xf7\xc3\x37\xb4\x72\xa5\xcc\xaf\x32\xff\x83\x14\x9f\x91\xaa\x5a\xe0\x27\x58\x56\x46\x53\x9c\x5f\x4d\xb2\x15\x10\x96\x5f\x4d\x26\x99\x13\x4e\x82\x17\x59\x0a\xc5\x16\x98\x11\x47\x92\x7b\xad\x0a\xc1\x93\x07\xa3\xb9\x21\xe5\x17\xc3\xed\x8f\xff\xfd\xc4\x79\xa3\x9f\xa5\x41\x27\x68\x4b\xa1\x36\xc8\x80\x5c\x60\xeb\x76\x12\xec\x0a\xc0\x61\xb4\x32\x50\x2c\x70\x9a\x52\xa6\xd6\x36\xa1\x52\xd7\xac\x90\xc4\x40\x42\x75\x99\x92\x35\x79\x4e\xa5\x58\xda\xd4\x42\x49\x94\x13\x74\x56\x8b\xf4\x2e\xb9\x4b\xee\xba\x9d\xa4\x14\x2a\xa1\xd6\xe2\x8b\x4e\xa8\xb5\x29\xa9\xaa\xa3\x70\x10\xc9\xd1\x0f\xc5\x67\x54\x6a\xb2\xf9\x89\xf6\x88\x09\x5b\x49\xb2\x9b\x23\xa5\x15\xa0\x43\x96\x46\xa1\xab\x49\x96\x36\x3c\x64\x4b\xcd\x76\xa8\xd5\x09\x86\x04\xa2\x92\x58\xbb\xc0\x52\xd3\x0d\x2a\xb4\x94\xfa\x09\x09\xaa\x15\xce\xb3\x54\x44\x5f\x40\x9d\xd0\xaa\x15\xa4\x5a\x39\xa3\x65\x0c\x64\x92\x31\xb1\x6d\x91\x5a\xa0\x42\x9b\x32\x02\x93\x6c\x75\xdb\x02\x81\x49\xfc\x4e\xfa\x57\xb7\x8d\x9d\xa1\x87\x78\x92\x42\x15\x1a\x15\x02\x24\x6b\xbc\x4d\x1e\x1d\x71\xb5\x8d\x1a\x29\x13\xdb\x57\x95\x83\x9a\x0d\x92\x43\xed\x23\x0f\x74\x05\x74\x53\x12\xb3\x89\x2c\x44\xb6\xda\xc4\x15\x50\x07\x0c\x7d\x46\x53\x6e\x00\xd4\x14\xcd\xd1\xd4\x00\x9b\x76\x64\x79\x53\xb6\x22\x1d\x59\xb6\x24\x52\x82\xe9\xe5\x3e\xb0\x72\xdf\xfe\x09\x96\xbe\x0a\xdb\xa1\x53\x1c\xad\x4d\x82\x7f\x41\x37\x0b\x6c\xa0\x41\x3f\x5e\xe3\xbc\x2f\x9b\xa5\xde\x65\xeb\xde\x67\xac\xf8\xcc\xae\xf4\x53\xcf\x5b\x9b\xe8\x9b\x32\x0d\xe7\xf3\xbd\x56\x4a\x28\x7e\x3e\xd9\x4b\xd9\x8e\x2d\x35\xcb\x60\xeb\xdb\xb3\x08\x89\xe6\x71\x31\xcc\xe2\x78\x84\x83\x33\x34\xb5\x9a\xf9\xf3\xb3\xf8\x6c\x8e\x5e\x39\x5b\xe6\x85\x36\x59\xba\xcc\x51\x0c\x92\x70\xdd\x96\xde\x8a\x28\x0e\xec\x8b\xf3\xa9\x04\xaf\x7d\x7f\x23\x0a\xfb\x29\x60\x6f\xb5\x12\x2c\x58\xdd\xef\x51\xc0\x1e\x04\x43\x87\xc3\x20\xe2\x5e\x01\x8e\x6a\xb1\x33\x5b\x08\x09\x36\x91\xa0\xb8\x5b\xa1\x1c\xdd\xe2\x57\xb2\x3d\x53\xee\x93\xdf\xbd\xfe\x79\xb2\x7c\x3f\x0e\x74\x32\x0b\x12\xa8\xeb\xe1\xcb\xda\xb9\xe6\xec\x75\xe5\xbb\xdc\x2e\x70\xe1\xbb\x18\x15\x48\x28\x14\x82\x0c\x68\xa9\x99\x1f\x4d\x42\x55\xb5\xb3\x89\xdf\x0f\xdc\x05\x7b\x97\xb3\xbe\x9c\xcf\x1f\x9a\x73\xa1\xf8\x5b\xfa\x77\xd8\xb8\x43\x81\x50\xd3\x4b\xfd\xdc\x2b\x77\x1f\x31\x72\xbb\x0a\x9a\x8a\xf7\x28\x12\xcc\x4f\x3c\xae\x6b\xf7\x4a\x76\xfe\x80\x12\x0f\x75\x46\x24\x59\x82\xf4\xb4\x74\x5a\xb9\x75\x4c\xd7\x2e\x4b\x03\x74\xa1\x6a\xdf\x1f\x18\x18\x73\x2a\x30\x0f\x9d\x08\x2c\x40\xd6\x31\x30\xe6\xbf\x0a\x8c\x70\x50\x27\x39\x8b\xe0\x89\xe0\x1a\x30\xfc\x9c\x8c\xee\xf4\xd1\x0f\x4f\x3d\xd6\xed\xeb\x85\xdc\x8c\x4b\xeb\x88\xf1\xa3\xb2\x3f\x47\x83\xf4\xbe\xd9\x99\x48\x4d\x98\x50\x7c\x8e\x82\x68\x22\x14\xbf\xf1\x97\x28\x59\x4a\x60\x73\xf4\xc1\x92\x2d\x30\xf4\xeb\x57\x03\xc7\xf5\x87\x6e\xda\xdc\xb4\x66\x2a\x23\x4a\x62\x76\x5e\xa3\x11\xbc\x41\x61\x62\xce\x11\xea\x74\x1b\xe1\x03\xce\xf7\xfb\x81\xc1\x8f\x2f\x46\x24\x04\x38\x8c\xc8\xc7\xb0\xba\xf6\xd3\x25\x26\x78\x61\xa8\xf4\xda\xd3\x9e\xe8\x90\xd1\x44\x78\x0b\x91\x64\x0b\x1f\xaf\xfb\xf7\x43\xc7\x60\x8f\x42\xb2\x85\x31\x83\x47\x02\x3d\x78\x92\xbf\x3e\x81\x51\xb0\xcf\x5f\xdc\x69\x65\x0f\x38\x7f\x24\x5b\xd8\xef\x9b\xfd\xcf\x53\x36\x9d\x4f\xa7\x63\x82\xde\x31\x12\x5f\x10\xc0\x0d\xec\x5a\x16\x5a\xb7\x8a\xcf\xda\xb4\x22\x1f\xac\x0f\x75\xf7\xf3\x16\x42\xc5\xe5\xdf\xc3\xea\x74\x48\xe3\xf3\xf3\xbd\x15\x3a\xfe\x18\x85\x02\x4e\x9c\xd8\x02\x2a\xc1\x5a\xc2\xa1\x77\xdf\x35\xd5\x63\xcc\x91\xda\xe3\x48\x38\x56\xd7\x10\x47\x87\xc3\xc8\x75\xb7\xf2\x63\x3c\xbc\xf0\xc2\x9f\x92\x88\xc1\x53\xaf\xeb\xe8\x3e\x8d\xc0\x84\xd3\x06\x79\x9c\x08\x05\xad\xf7\x63\x32\x01\xc7\xf9\x2b\xde\x26\x59\x65\xe0\xf8\xe8\xe4\x3d\x23\xfd\x0a\xd3\xb5\x9b\x8f\xc6\xf1\x0d\x02\x63\xe6\xa3\x51\x78\x83\xc2\x40\x99\xbf\x18\x43\x07\xef\xbd\x32\xf1\x01\x9f\xfa\xac\xe2\x63\x96\x1a\x51\x39\x64\x0d\x7d\xc3\xd3\x9d\x28\x5e\x4b\x62\x92\xb5\x4d\x6f\x93\xdf\x92\x4f\xdd\x86\x7f\xb8\xaf\x6d\xb8\x01\x83\xbd\x7f\x61\x9a\x42\x7a\x9b\xdc\x25\xff\xf7\x2b\x6f\x0b\xd1\x15\x31\x16\xdc\x02\xd7\xae\xf8\x74\xc6\xf4\xda\xa6\x5b\x90\xfa\xf9\x7c\x00\xeb\xf8\xc1\x30\x92\xc9\x52\xff\x05\x90\x5f\x65\x69\xfc\x72\xfa\x27\x00\x00\xff\xff\xb7\x11\x75\x15\x4a\x0d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3402, mode: os.FileMode(420), modTime: time.Unix(1470571170, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x58\xdd\x6f\xdc\xb8\x11\x7f\xf7\x5f\x31\x27\x2c\xb2\x52\xac\x50\xf6\xf5\x03\xa8\xb7\x6a\x70\xf0\xa5\x68\x80\x4b\x5b\xc4\xc1\xbd\xec\xb9\x00\x2d\x8d\x24\x26\x14\xa9\x92\xd4\xda\x7b\xd9\xfd\xdf\x0b\x92\xfa\xa0\xd6\xeb\xf4\x2e\x0f\x59\x8a\x33\x9c\xf9\x71\xbe\xe9\xec\x35\xd4\x5c\x3e\x50\x0e\xab\x94\x16\x08\xaf\xb3\x8b\x8b\x1d\x55\x80\x25\x33\x52\x41\x0e\xb4\x40\x62\x3f\xe2\xc8\x6f\x45\xc9\xe6\xc2\xaf\x88\x46\x73\xd7\xc8\xc7\x7f\x2b\x26\xcc\x07\xaa\x6a\x26\xe2\x8a\x72\x8d\x33\xc7\xea\x81\xcb\xe2\xcb\x5d\xa1\x24\xe7\x4c\xd4\x90\xc3\x7b\x51\x31\xc1\xcc\x3e\x14\xf2\xa9\xc1\x16\xe3\x88\x16\x98\x19\xbb\xcc\x6a\x66\x9a\xfe\x61\xa9\xe9\x87\xde\x48\x2f\xe8\x9d\xdb\x7b\x2f\x8c\xfc\x99\xe1\x63\x6c\x54\x6f\x35\x06\xa8\xef\xd0\xfc\x4c\x79\x8f\x90\x43\xd5\x8b\xc2\x30\x29\xe2\x1d\xe5\x09\x7c\xbd\x00\xb0\x6c\x0c\x72\x98\x24\x6b\xcd\xa4\x20\xa5\x2c\x48\x27\x35\xb3\xcc\x9f\xe4\x7b\x51\xe2\x53\x3c\xb1\x70\x74\x42\x48\x8d\xe6\xb6\x57\x5a\xaa\x38\x49\x36\x17\x30\xcb\xf0\xfa\xac\x92\x14\x18\x1c\x0e\xf0\xe6\x3a\xd9\x5c\x1c\x3d\x28\xda\x75\xd6\x8e\xa2\xee\x39\x55\xa4\x95\x65\xcf\x31\x5e\x3f\xe2\x43\xa7\x64\xb1\x4e\x61\x7b\x3f\xc2\xd7\x4c\x14\x16\x75\x3c\xc1\x9e\x31\xeb\x82\x72\x4b\xdb\x6e\xa3\x56\x47\xe9\xf5\xd5\xd5\xd5\x7d\x0a\xdb\x48\x47\xe9\x9f\xfd\xaa\x9d\x56\x4d\x94\x7e\xff\x47\xb7\x2a\xa3\xf4\x0f\xd7\x9e\x6a\x9a\x28\xbd\xfe\xfe\xfe\xde\x02\x57\x68\x7a\x25\x66\xeb\x94\xd4\xa0\x57\xe5\x95\xed\x20\x87\x4b\x81\x8f\xf0\x23\x35\x18\x27\x6f\x2c\x7d\xe3\xa8\x95\x54\xf1\x68\xc2\xab\x0d\x30\xf8\xab\x47\x46\x38\x8a\xda\x34\x1b\x60\x97\x97\xa3\xa4\x01\x38\xe4\x9e\x65\xcb\xee\x37\xc3\x3e\xab\xe2\x9d\x3d\xb9\xbd\xbe\x4f\x46\x30\x3b\xb8\x04\xbd\xbd\x9a\x78\x2c\x86\x0f\xd4\x34\x44\xc9\x5e\x94\xf1\x2e\x73\xdc\x9e\x7a\x74\xff\x0f\x07\xa3\x37\x91\xdd\x3d\x6e\x2e\x8e\xce\x2f\x17\xb4\xeb\x48\xc9\x94\x75\xda\xce\xc6\x55\x2d\xa3\x14\x4e\x4c\x3a\x9c\xfd\x3a\x08\xd2\x46\xb1\xc2\xdc\x40\xf4\x43\x94\xba\x2d\xce\xc4\x97\x9b\xf9\x90\x4e\x01\x53\xa0\xc6\x28\xbd\xbc\x5d\x99\x82\xd9\x04\xdf\x45\x83\xc5\x97\x30\xf0\x66\x76\x80\x82\x23\x55\x9f\x58\x8b\xb2\x37\xb1\x49\x36\x13\x81\x55\x71\x99\x00\x12\x83\x4f\x26\x76\x51\x10\x97\x49\x40\x37\xd6\x86\x68\xc6\xa3\x4e\x49\x0a\x36\x06\x26\xa6\xe3\xf0\xab\xc9\xea\x91\x9a\xa2\x89\x1d\x58\x42\x6b\x19\xdc\x5d\x87\x68\x4a\xc8\x61\xf2\xb1\x0e\xb4\x39\xf1\xf1\x2c\x39\x30\xfa\xf1\xe2\x78\xc6\xc2\x5c\xd6\xbf\xd9\xc2\xeb\xdb\xf5\x79\x0b\x17\xb2\xc3\x14\x90\x63\x7b\xd6\xd0\x36\xf6\x1f\x99\x28\xe5\x23\xb1\x4b\xcb\x17\x06\x0b\x55\x20\x5c\x48\x86\x91\xe7\xca\x45\xb8\xeb\x94\x90\x4a\x72\x2e\x1f\x21\x07\x5b\x3a\x46\x92\x15\x48\xa4\x88\xd7\xfe\xd4\x3a\xb8\x0f\xee\x50\x98\xd0\x72\xb3\xf0\x1f\x59\x55\xd9\x84\x45\xe2\xbf\xff\x81\xac\x6e\x0c\xbc\x01\x24\x05\x67\x28\x8c\xdf\x08\x8c\x6b\xcf\x76\xa8\x0a\x14\xce\xa9\x81\x94\x1c\xae\xe0\xad\x75\x2a\xdc\xcc\x02\x3f\xc9\x2e\x9b\x99\x92\xd7\xd7\x57\x57\x4b\x59\xd3\x65\x26\xa1\x79\x0e\x0b\x2e\x56\xc5\x23\x53\x9e\x2f\x4c\x30\xe6\xde\xcc\x7b\x62\x20\xbf\x98\xc9\xa5\x2c\xfa\x16\x85\x21\xff\xed\x51\xed\xef\x5c\x61\x94\x2a\x8e\x86\x13\x84\x15\x52\x44\x09\xd1\x66\xcf\x91\x94\x4c\x77\x9c\xee\x27\x31\xf0\x16\xd6\xae\x1f\xac\xe1\x06\xd6\x42\x0a\x5c\x9f\x86\x18\x4c\x46\x1f\xce\xfc\x24\xeb\x45\x06\xb1\x2a\x5e\x5e\x20\xb0\x13\xe4\xf0\x97\xe1\xdf\x69\x52\x8c\xc5\xd7\x3a\x19\x85\x89\x7d\x20\x25\xce\xdf\x0a\x35\xfb\x15\xad\xbf\x47\x8d\xc9\x32\x5c\x56\x2e\x2a\xe8\x0e\x9f\xc5\x44\x0a\x25\x35\x34\xc4\x97\x65\x0f\xb6\x5a\x41\xd1\x2b\x65\x9d\xc1\x6c\x23\x81\x87\x3d\xb4\x4c\x00\x97\x35\xa0\x30\x6a\x3f\xb1\x8b\xb1\xc6\xb5\xf4\x29\x16\x5e\x1c\xf9\x49\xd6\xff\xaa\x2a\x8d\xe6\xcd\xf8\xf9\x81\x3e\xdd\xb1\x5f\x31\x88\xa2\xc7\x86\x71\xf4\xad\x2f\xd0\xee\x23\xa2\x85\x7c\x12\xb4\x15\xf7\x9b\x80\xcc\xaa\xf8\xbb\x36\x81\x07\x85\xf4\x4b\xb8\x2f\x2e\x2f\x4f\xd8\x5a\xb2\x52\x28\x4a\x54\x58\x26\x50\x48\x61\x98\x98\x73\x65\xca\x81\x8e\xda\x1b\x4c\x51\x51\x28\xa4\x06\xdf\x0d\x46\x8e\x2c\x39\x4a\xc2\x43\x76\xc7\x15\xb9\x5b\x29\x8c\xcf\x80\x96\x3c\x3c\xe3\x28\x38\xd5\xfa\x9f\xb4\x45\x47\xef\x42\x3a\x12\xda\x75\x28\xca\xdb\x86\xf1\x32\xb6\xdc\x0b\x05\x01\xec\x93\xfc\x9e\x83\x01\xc2\xd8\xfa\x3f\x45\x4e\xf5\x62\x6e\xc6\x2b\x25\xa5\xb9\xf3\x75\x6a\xd5\x18\xd3\xa5\xb0\x32\xbe\x24\x07\x7d\x7a\xae\x53\x96\x1d\x72\x98\x8f\x6d\xc6\xf9\x43\x74\xbd\x71\x7d\x91\x4c\x4b\xef\x45\xdd\xc8\xc7\x1b\xf8\x2a\x7b\x73\x63\xc1\xa7\x80\x4a\x0d\x2b\x5a\xa3\x30\x37\x6e\xc0\x3a\xfa\x0a\x5a\x31\x8e\x37\xb0\x5e\xcf\x5f\xfa\x06\x44\xcf\xb9\xef\x86\x36\x1a\x35\xaa\x1d\x2a\x17\x0e\x83\xee\x5e\xd9\x8a\xc8\x65\x41\xdd\x48\xd3\x51\xd3\x08\xda\x22\x51\xd8\x71\x5a\x60\x9c\x6d\xff\xf3\x4b\x76\x7f\xb9\xca\xd2\x28\x4a\xe0\x12\x22\xbd\x17\x45\x34\x22\xb7\x82\x1c\xee\x61\xf1\xf5\x38\x52\x6c\xbb\xde\x21\x97\x4f\x44\x6b\x8c\x7b\xc5\x87\xe4\xb0\x74\x4d\x14\x16\x52\x08\x2c\xcc\xb9\xd6\xb8\x23\x0a\x8d\xda\x7b\x67\x78\x81\x44\x8a\xbe\xb3\x53\xc7\x39\x7e\x4d\x56\xd8\x32\x33\x25\xe5\xa4\xc7\x91\x68\xd7\xf1\x53\x59\x45\x43\x45\xbd\x90\x35\xc0\xb1\xd1\x3d\x0a\x9d\xb6\x20\x87\x69\xfd\xa2\xd8\x2c\x73\x17\xb3\x10\xc2\x50\x9b\x66\x80\xbb\x81\xf0\x0c\xbd\xcd\x41\xef\x75\x62\x5d\x66\xa7\xc5\xf0\x3b\x68\x7b\xcf\xa5\xc3\x34\xf5\x84\x73\x90\xd3\xe9\xba\x0d\xe4\x10\x8a\x82\x57\xaf\x16\xdf\xdb\xe0\x63\xa8\x0b\x2e\x64\x7d\x90\x0c\x55\xe3\xef\x2f\x70\xce\x68\x46\x5d\xb6\x9b\xb8\xa3\x81\x51\x86\x77\x83\x37\xb8\x9e\x67\x64\x29\xe2\xc8\xc9\x7c\x3e\x28\xd8\x63\x05\x2d\x1a\x1c\xab\xa6\x37\xd3\x4b\xb8\xe7\xd9\xbd\x1e\xe7\xee\xc1\xf9\xb3\xdd\xe3\xf3\xe1\x90\x38\x88\x0d\x15\x25\xc7\x00\xe2\x34\x32\x45\xce\x00\xb7\x52\x54\xac\x1e\x7e\x7a\xe5\xf2\xc4\x19\x25\x84\xbe\x70\xd5\x68\xee\xdc\x27\xa1\x75\xe9\x76\xb0\x9a\x6d\x58\x9e\x3a\x4c\xc8\xbe\x3f\x5b\x96\x53\xc2\xdf\xec\xfe\xab\x57\x8b\x68\x48\xe6\x68\x08\x63\x26\x1f\x55\x4e\x23\x90\xab\x5b\x29\x0c\x8f\xa1\x67\x77\xfa\x36\xfe\x2c\x73\x56\x02\x26\x0c\xa3\xdc\x5d\x62\x50\x37\xde\x61\x0a\xa7\x65\xa8\x3e\x87\xa6\x83\xa7\x4e\x21\xbb\xfd\xa0\xe8\xbc\x83\xce\x03\x0e\xa4\x9d\x22\x0e\x73\xc8\x7f\x87\xd9\x90\x65\xf8\x64\x50\xd8\xf7\x9c\x86\xb8\x68\xa4\xd4\x08\x95\x92\x2d\xd8\x62\xad\x6f\xb2\xe1\x61\x49\x0a\xd9\x66\xf4\x33\x7d\x92\xaa\xce\xdc\xab\x53\x21\x66\x2d\xd5\x06\x55\xc6\xd9\x83\xdb\x6b\x65\x89\xc9\x94\x22\xf6\x0b\x72\xc8\x7e\x21\xb1\x91\x2d\x3f\x7c\xd6\x52\x1c\x3e\xeb\x43\xa1\xf5\xa1\x31\x2d\x3f\xd4\xf2\xb0\xa7\x6f\x5b\x7e\xd0\xcd\xe1\xa9\xe5\xc9\x2a\x23\x06\xb5\x19\x50\xbf\x85\x8f\x58\xbf\x7b\xea\xc8\xea\xda\xce\x3e\x4c\xb0\xf5\x08\xb9\x90\x4a\xf9\xe7\xe5\x64\x6c\xaf\x2c\xcf\x61\xbd\x6f\xf9\x3a\x19\x95\xaf\xf7\xb4\xe5\xeb\xcd\x73\xae\x5a\x06\x4c\xb5\xe4\x54\xd4\x03\xdb\x9c\x28\x77\xfe\x9d\x1b\x27\xf6\xb5\xfa\x41\x96\xc3\x7b\xdb\x9e\xca\xa2\x4b\x77\xd9\x11\x11\x97\xb4\xf4\x31\xe0\x6c\xe7\x52\x73\xf1\x32\x7c\x39\x35\x0f\x07\x88\xa2\xb9\xb0\xd8\x7c\x7e\x39\x5d\x59\x15\x3b\x86\xef\xf2\x1c\x76\x63\x28\x2d\x5f\xf0\xf1\x6e\x42\xe5\x1f\x56\xac\x02\x57\x85\xce\x87\x53\x32\x34\x3d\x43\x95\xc9\xec\x93\x83\x2a\xe3\xab\xb4\x5d\x9d\x6d\x3d\xf6\x7d\xce\x15\xd2\x72\xff\xb1\x17\xc2\xff\x8d\xc2\x65\xcc\xf0\x39\xd5\x3e\x2b\x81\x78\xfa\x5c\x8d\xc7\x7d\x74\xf7\xb4\xad\xd7\xef\xbb\xe9\x80\x74\xbd\xed\x51\x96\x61\x9d\x10\xd3\xa0\x38\x7d\xd7\x2f\x44\xd8\xca\x7a\x02\xe5\x2d\xac\x3f\xfa\x5b\x60\xe9\x86\xe6\xbb\x61\x3d\xf6\x82\x71\xfc\x58\x08\x5e\x8a\x74\x03\xc3\xc6\xa6\xda\x9f\xe6\xe7\xe2\x31\xc8\x2b\x85\xba\x3b\x03\xc7\xdd\xc8\xd2\x5c\xab\x1f\x8e\x25\xa4\x62\x82\x72\xbe\xff\xd6\x4d\xbc\x91\xbc\xde\x8b\x79\xb6\x1a\x1a\x44\x21\xdb\x96\x99\xa1\xfa\x4e\x2d\xf4\x7c\x9b\xb7\x94\x73\x36\xb7\xdb\x2f\x98\x5c\xea\x79\x2e\x58\x94\xaa\x6f\x39\xc0\xc9\x3b\xed\xb3\x2f\xda\x76\xe2\xfe\xfd\xa6\x9d\x81\xff\x5e\xcb\xce\x96\x38\x67\xd8\x61\xc6\xda\xe1\xf9\x28\x3f\x49\xaa\x17\xda\xfc\x4b\x45\x7a\xe3\xc6\xe1\xff\x05\x00\x00\xff\xff\xac\xe6\x85\x4f\x29\x14\x00\x00")

func jsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_jsAppJs,
		"js/app.js",
	)
}

func jsAppJs() (*asset, error) {
	bytes, err := jsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/app.js", size: 5161, mode: os.FileMode(420), modTime: time.Unix(1470569793, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/app.css": cssAppCss,
	"index.html": indexHtml,
	"js/app.js": jsAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"app.css": &bintree{cssAppCss, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"js": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{jsAppJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

