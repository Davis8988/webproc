// Code generated by go-bindata.
// sources:
// static/app.css
// static/app.js
// static/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticAppCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x91\xc1\x6e\x83\x30\x10\x44\xcf\xf8\x2b\xb6\xaa\x7a\x0b\x11\x6d\xd4\x1c\xcc\xb1\x5f\x62\xe2\x05\x56\x35\x5e\xcb\x5e\x9a\x44\x51\xff\xbd\x32\x10\x12\x25\xbd\x79\x61\xfc\x76\x66\xdc\xcb\xe0\x36\xd0\xb0\x3d\xc3\x45\x15\x2d\x7b\x29\x5b\x33\x90\x3b\x6b\xf8\xe2\x31\x12\xc6\x0d\x0c\xec\x39\x05\x73\xc0\x5a\x15\x3d\x52\xd7\x8b\x86\xf7\xaa\x7a\xab\x55\x71\x24\x2b\xfd\x3a\xf1\x0f\xc6\xd6\xf1\x51\x43\x4f\xd6\xa2\xaf\xd5\xaf\x52\x5b\x87\xad\x6c\xb6\x31\xdf\xcb\x3b\x02\x27\x12\x62\xaf\xc1\x34\x89\xdd\x28\xcf\xd8\xeb\xad\x2c\x17\x3c\x49\x69\x1c\x75\x5e\xc3\xc4\xa8\x55\x21\x1c\x34\x54\xb5\x2a\xb2\x68\x3e\x2d\x46\x76\xbb\xec\x23\x18\x6b\xc9\x77\x1a\x3e\xaa\x70\x9a\x70\xcd\x28\xc2\x3e\xf3\x6e\x8e\x97\x5f\x37\x67\x0f\xd8\x99\xb5\xe8\xf7\xfb\xd9\xd7\x2b\x5a\x12\x8e\x70\x51\x00\x00\xf7\x7d\xad\x2d\xbd\xd0\x10\x38\x8a\xf1\x52\x4f\xa2\xff\x02\xe7\xef\xd7\x75\xf9\x1c\xe7\xf8\xcb\xd4\xb0\x08\x0f\xeb\xb8\xa6\xcc\xc3\x73\x53\x03\xa6\x64\x3a\x4c\x53\xb9\x73\xf2\x72\x62\xef\xd6\x88\x23\x5d\x55\x8f\x95\x1e\xd0\x0b\xc6\x5a\x15\x96\x52\x70\xe6\xac\x81\xbc\x23\x8f\x65\xe3\xf8\xf0\x7d\xf7\xc2\x9f\x0b\xec\x2f\x00\x00\xff\xff\x8a\x85\xaf\xc7\x31\x02\x00\x00")

func staticAppCssBytes() ([]byte, error) {
	return bindataRead(
		_staticAppCss,
		"static/app.css",
	)
}

func staticAppCss() (*asset, error) {
	bytes, err := staticAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/app.css", size: 561, mode: os.FileMode(420), modTime: time.Unix(1470382020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\xc1\x4e\xdc\x30\x10\xbd\xe7\x2b\x46\xee\x1e\x1c\x14\xc5\x48\xa8\x17\x56\x9c\xca\xa5\x07\x04\xd2\xd2\xde\xbd\xf6\x24\x71\x71\x3c\xc8\x76\xd8\x45\x68\xff\xbd\x9a\x38\x74\x03\xe5\x36\x71\xe6\xbd\x99\xf7\xde\xa8\x0b\xe8\x3d\xed\xb5\x87\x4d\xa3\x0d\xc2\x85\xaa\xaa\x17\x1d\x01\xad\xcb\x14\xe1\x06\xb4\xc1\x96\x3f\xa4\x28\x4f\xa2\xde\x56\xa5\x6a\x13\xe6\xdd\x40\x87\x87\xe8\x42\xbe\xd3\xb1\x77\x41\x76\xda\x27\x3c\x77\x6c\xf6\x9e\xcc\xd3\xce\x44\xf2\xde\x85\x1e\x6e\xe0\x67\xe8\x5c\x70\xf9\x75\x4d\xf2\x38\xe0\x88\x52\x68\x83\x2a\x73\xa9\x7a\x97\x87\x69\xbf\x9a\xd4\x63\xde\x61\x4a\x8e\x82\xac\x19\x71\x47\x76\x01\x8c\x64\x51\xb9\xe0\xb8\xb9\xaa\xba\x29\x98\xec\x28\x40\x1a\xe8\x30\x38\x8b\x12\x3d\x8e\x35\xbc\x55\x00\x5c\xb5\xc9\x3b\x8b\xb7\x74\x08\xf2\xfb\xe5\x65\xbd\xad\x00\x78\xbe\x1b\x91\xa6\x2c\xdf\xd1\xb2\x00\x00\x94\x2a\xa8\x4e\x5b\xbc\x9f\xb2\xbc\x5a\x30\x6b\xb2\x5f\xcf\xff\xa8\x4e\x0d\x5c\x5d\xce\xf5\x69\xb5\x0a\xc6\x28\x8f\x43\x2c\x9c\x1b\x29\xbe\x61\x8c\x63\xea\x45\xdd\x66\x3c\x66\xfe\xd5\x46\x4c\xcf\x14\x12\x3e\xe2\x31\x97\xa5\xde\xd7\x5f\xfa\x45\x5d\x48\x95\xf2\xa4\x2d\xb0\x83\x4e\x7b\x48\x59\x67\xac\x36\x6c\x8f\x14\x86\x42\xe7\xfa\x29\x22\x33\x0f\x18\xce\x72\x4c\xd7\x97\xe9\x86\x42\x22\x8f\xad\xa7\x5e\x8a\x85\xc4\x25\xb4\x62\x1e\x7a\x0e\xe4\xb7\xf6\x13\xce\xb0\x6d\x75\xaa\xdb\x4e\x3b\x2f\x31\x46\xb6\x58\xa9\x41\x07\xeb\x11\x92\x7e\x41\x30\xde\x99\xa7\xf9\x5e\xe6\xcf\x1b\xd6\xb7\x9f\x72\xa6\xc0\x94\xfc\xce\xfb\x96\xe4\xe7\xd3\xd8\x56\xdc\xd8\x52\x90\x62\xc6\x8a\x06\x3e\xb9\xee\x3a\xb9\x60\x6a\x88\x98\xa7\x18\x78\xb7\x33\x4d\x8e\x13\xce\x16\x31\x8f\xb6\xf6\x87\xd7\x29\x49\xb1\x34\x14\x25\x3c\xd8\x74\xdc\x7d\xbe\x9f\xa2\x69\xfe\xad\x94\xfe\xa3\x8f\x9c\x46\xcb\x85\x7c\x1b\x31\x0f\x64\xaf\x41\x3c\xdc\xef\x1e\x45\x03\x53\xf4\xd7\x2b\x3f\x1b\x78\x8e\x64\x30\xa5\x5b\x9d\xf5\xf5\xac\xa3\x01\xcb\xb5\xe9\xfa\xd3\x67\xb7\xdf\x8f\xe7\x43\x86\x69\x32\x4c\x30\xe7\x08\xb0\xf6\xb4\xd5\xfe\xa0\x5f\xd3\x17\x78\x16\x18\x71\xa4\x17\xfc\x4a\x23\xfc\x6f\x2d\x3f\x7e\x88\xb8\x50\x8b\x65\x26\x67\xb9\xad\xfe\x06\x00\x00\xff\xff\xf5\x4e\x12\xc3\xf1\x03\x00\x00")

func staticAppJsBytes() ([]byte, error) {
	return bindataRead(
		_staticAppJs,
		"static/app.js",
	)
}

func staticAppJs() (*asset, error) {
	bytes, err := staticAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/app.js", size: 1009, mode: os.FileMode(420), modTime: time.Unix(1470382020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\xbf\x92\xdb\x20\x10\xc6\x6b\xf9\x29\x08\xbd\x45\xec\x2a\x7f\x90\x9a\x24\x75\x32\x93\xa4\x48\x89\x61\x2d\xd6\x41\x88\x63\x91\x27\x7a\xfb\x0c\x42\xf2\xe9\x6e\x6e\xc6\xc5\x5d\xa5\xd5\xc2\xfe\xbe\x8f\xd5\x22\xf9\xee\xeb\xf7\x2f\xbf\xfe\xfc\xf8\xc6\x6c\xea\x5d\xbb\x93\xe5\x51\x49\x0b\xca\xb4\xbb\xaa\x92\x0e\xfd\x5f\x16\xc1\x35\x9c\xd2\xe4\x80\x2c\x40\xe2\xcc\x46\x38\x37\x5c\x08\x6d\xfc\x85\x6a\xed\x86\xd1\x9c\x9d\x8a\x50\xeb\xa1\x17\xea\xa2\xfe\x09\x87\x27\x12\x04\xbd\xf2\x09\xf5\x7e\x44\x71\xa8\x0f\xc7\xfa\xfd\x2d\x55\x6b\x22\x7e\x57\x41\x85\xb0\x6e\x94\x62\xf1\x24\x4f\x83\x99\x98\xef\xf6\x2a\x84\x86\x1b\x4f\x9c\xa1\x29\xc1\xcc\x33\x78\x65\xda\x29\xa2\x86\x3b\x38\xa7\x39\x59\x49\x7b\x6c\x8d\xa7\x5e\xd1\x83\x14\xf6\x58\x72\x06\xaf\x25\x38\x8d\x29\x0d\x7e\xad\x1a\x91\x85\x88\xbd\x8a\x13\x2b\x0b\xbc\xfd\xa9\xae\x20\x45\x79\x2b\x25\x62\x2e\x5e\x31\x6b\x69\x0f\x44\xaa\x83\xe2\x64\x59\xca\xe6\x20\x46\xbe\xc1\x7b\xe8\x54\xc2\x2b\xb0\x65\x3f\x67\xf3\xd1\x1b\x6e\x90\x82\x53\xd3\x27\x3f\x78\xf8\xbc\x40\x9e\x08\xe4\x1e\x40\xe4\x2b\xb4\xa7\x8e\xb7\x8b\x97\xea\xd1\xd6\x13\x6d\x1a\xb5\x06\xa2\xad\x7e\x18\x08\x5f\xa5\xdf\xfe\x0e\x46\x25\x30\x2f\x4a\x3f\xf6\xe6\x96\xdb\x22\x22\x76\x76\xfd\x2a\xb7\xfe\x18\x4c\x43\xdc\x1c\x65\x43\x23\x1d\x31\x24\x46\x51\xe7\x89\xcb\xc3\x55\x77\xc3\xd0\x39\x50\x01\xe9\xd9\xc0\x5d\x1e\x46\x88\x93\x38\x2c\x41\x7d\xa1\xcc\x2c\x84\x97\x68\x77\xe6\x57\x69\xc8\x73\x5b\x7f\xcc\x51\x86\x31\x6d\x55\x24\x48\x0d\x1f\xd3\xf9\xc3\x1b\xb1\xc9\x63\x08\x90\x48\xa0\xc7\xb7\x73\x9c\x2c\xf4\xb0\xef\x30\xd9\xf1\x74\x87\x9a\x6f\xd9\xb3\x1d\x52\xe4\x5b\xd6\xee\xa4\x98\xff\x08\xff\x03\x00\x00\xff\xff\x74\x65\xbd\xf6\x28\x04\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 1064, mode: os.FileMode(420), modTime: time.Unix(1470382020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/app.css": staticAppCss,
	"static/app.js": staticAppJs,
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"app.css": &bintree{staticAppCss, map[string]*bintree{}},
		"app.js": &bintree{staticAppJs, map[string]*bintree{}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

