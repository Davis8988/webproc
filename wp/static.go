// Code generated by go-bindata.
// sources:
// static/css/app.css
// static/index.html
// static/js/app.js
// DO NOT EDIT!

package wp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cssAppCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\xc1\x8e\xda\x30\x10\x86\xcf\xf8\x29\x5c\xa1\x95\x5a\xb4\x81\xa0\xb2\x52\x95\x5c\x4a\xab\xaa\x5b\xa9\x55\x4f\x7d\x00\x13\x0f\x61\xb4\xb6\xc7\x72\x06\x08\xaa\x78\xf7\xca\x71\x42\x03\xcb\x9e\xb0\xec\x7f\x98\x6f\xe6\xff\xb3\x63\x6b\x1e\xe5\x86\xf4\x49\xfe\x15\x93\x2d\x39\xce\xb6\xca\xa2\x39\x15\xf2\x2b\xed\x03\x42\x78\x94\x96\x1c\x35\x5e\x55\x50\x8a\x89\x57\x5a\xa3\xab\x0b\x99\x97\x62\x62\x55\xa8\xd1\xa5\xf3\x55\xe9\x33\x98\x03\x30\x56\xaa\x14\x67\x21\x86\x7f\xd7\xd8\x78\xa3\x4e\x85\xdc\x1a\x68\x63\x39\xba\x6c\x07\x58\xef\xb8\x90\xcb\x3c\x3f\xec\x3a\x75\x03\x06\x2a\x8e\xfa\xec\x08\x9b\x17\xe4\x4c\x79\x0f\x2a\x28\x57\x41\x21\x1d\x39\x88\xaa\x79\x45\x8e\x03\x99\xa6\xc3\x36\xd0\x26\x8a\x23\x6a\xde\x15\x72\xf9\x94\xfb\xd8\x81\xa1\xe5\x4c\x19\xac\x5d\x21\x2b\x70\x0c\x61\x3c\xc2\x32\x89\x36\x14\x34\x84\x2c\xf4\x20\xbe\x95\x0d\x19\xd4\x72\xba\x5e\xaf\x23\x51\xd7\x0a\x1c\xdf\x1b\x21\xfe\x64\x1a\x03\x54\x8c\x14\x9b\x90\xd9\x5b\x57\x0e\x48\x4f\xfd\x44\xdd\x6b\xac\xf7\xd4\x60\x52\x06\x30\x8a\xf1\x00\x17\xed\x32\x6a\x7b\xe9\xdc\x50\x1d\xe5\x3d\x1a\x93\xbf\x07\x36\x16\x4f\x0d\xd5\x35\x84\x58\x34\xb8\x92\xc6\x8b\xfb\xdf\x33\xa7\xf6\xc3\x7a\xf2\xe1\x69\x0a\x1a\x99\xc2\xad\xf7\x17\xc7\xdf\xa1\xf5\x14\x58\x39\x2e\xc7\xf0\x6a\xd3\x90\xd9\x73\x84\xef\xd8\xe2\xea\xfb\xfd\xe5\xdd\x46\x99\xc9\xa6\xb3\x81\x6d\x7f\x3b\xb2\xfa\xa1\x6b\x3e\xb7\xd0\x34\xaa\x86\xce\xc3\xde\x95\x34\xeb\xc7\x81\x6f\xbe\xc7\x41\x15\x45\x77\xfd\xbc\x78\x82\xce\xa0\x83\x6c\x63\xa8\x7a\x79\x95\x85\xb3\x10\x62\x31\xfb\xf5\xfb\xcb\x8f\x9f\xdf\x66\x0b\xf1\xd9\x82\x46\x25\xdf\x5b\xd5\x66\xbd\x70\xf5\x29\xf7\xed\x87\xb4\xf6\x14\xd8\xb7\xed\x3d\x8b\xc9\x55\x02\x47\x9b\x7d\x28\xc5\xe4\x3e\xe8\x59\x9c\xc5\x62\xf6\xfc\xe7\xfb\x15\x00\xba\x01\x60\xb9\x5a\x0d\x04\xe3\xcc\xbd\xa2\x08\x74\x4c\x08\x37\x69\xb9\x8a\x4b\xfc\x50\xca\xff\x77\xc9\x86\xdb\x0c\x75\x48\xff\x02\x00\x00\xff\xff\x1d\x77\x35\xff\x03\x04\x00\x00")

func cssAppCssBytes() ([]byte, error) {
	return bindataRead(
		_cssAppCss,
		"css/app.css",
	)
}

func cssAppCss() (*asset, error) {
	bytes, err := cssAppCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "css/app.css", size: 1027, mode: os.FileMode(420), modTime: time.Unix(1470450940, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x94\xc1\x8e\xdb\x20\x10\x86\xcf\xd9\xa7\xa0\xdc\x17\x94\xa8\x95\x56\x2d\xf6\x65\xdb\x73\x57\x55\x7b\xe8\x91\xc0\xd8\x9e\x14\x03\x62\x70\x76\xf3\xf6\x15\xd8\x49\xdd\x6c\xb5\x5d\xb5\xa7\x38\xcc\xcc\xf7\xff\x03\x03\xea\xcd\xc7\xcf\xf7\x5f\xbf\x3f\x7c\x62\x43\x1e\x5d\x7b\xa3\xca\x0f\xf3\xfd\xad\x8e\xb1\xe1\x8f\xb0\x8f\x29\x18\xde\xde\x6c\xd4\x00\xda\xb6\x37\x9b\x8d\xca\x98\x1d\x94\x94\x3d\x7a\xdb\x70\xab\xb3\x16\xf7\xc1\x77\xd8\x8b\x87\x14\xfa\xa4\x47\xde\x2e\x85\x4a\xd6\xe4\x5a\xe6\xd0\xff\x60\x09\x5c\xc3\x29\x9f\x1c\xd0\x00\x90\x39\x1b\x12\x74\x0d\x97\xd2\x58\x7f\x20\x61\x5c\x98\x6c\xe7\x74\x02\x61\xc2\x28\xf5\x41\x3f\x49\x87\x7b\x92\x04\xa3\xf6\x19\xcd\xed\x84\x72\x27\x76\x62\x77\x59\x11\x23\x7a\x61\x88\xf8\x5f\x45\x0c\x91\xd4\x31\x9e\x93\x95\x5c\x3a\x52\xfb\x60\x4f\xb5\x9a\xc0\x64\x0c\x9e\x19\xa7\x89\x1a\x6e\x82\xcf\x29\xb8\x19\xbd\x51\x16\x8f\xe7\xc8\x84\xac\x0b\x69\x9c\x03\x1b\x35\x6c\xcf\x81\xda\x2e\x7f\xed\xe6\x0c\xdb\x05\x70\x85\x46\x70\xb6\x42\x68\x08\x8f\x0d\xef\xd0\x01\x09\x07\xbe\xcf\x03\x6b\xd9\x76\x91\x2d\x7e\x1d\x98\xbc\xaa\xdc\x4f\x39\x07\x5f\x4b\x43\x2c\xad\x50\xc3\xbb\x62\x95\x75\x0c\x3d\xab\xa0\x1a\x1d\x83\x2d\x9b\x84\x3e\x4e\x99\x44\x59\xe7\xad\x92\x33\x6f\xf1\x24\x2d\x1e\x5f\xb0\x77\xf6\x30\x4b\xae\xc2\x31\xe1\xa8\xd3\xe9\xec\xa5\xfd\x02\x94\x75\xca\x4a\xce\x0b\xd7\xf4\xd5\xd7\x4a\x66\x04\x22\xdd\x03\xf1\x95\x03\xb4\x0d\x87\x94\xf8\x4a\xcb\x43\xaf\x33\x1e\x81\x2d\xf9\x9c\xd5\x63\x6f\xb8\x45\x8a\x4e\x9f\xde\xfb\xe0\xe1\xc3\xc5\xeb\x4a\xa0\x9c\x3d\x24\x7e\x86\x8e\xd4\x97\x0d\xf8\xd5\xf2\x55\xf7\x25\x8d\x26\x63\x80\x68\xad\x1f\x03\xe1\x7f\xe9\xb7\xdf\xa2\xd5\x19\xec\x1f\xa5\x2f\x5f\xe5\x64\xea\x64\xd6\x3f\xa3\xc6\xdf\x46\x14\x7c\x5e\x26\xf4\x6a\x7e\xc1\x62\x0e\xe9\xd9\x16\x2e\xab\x6b\x9d\x15\xfe\x19\xc5\x85\xfe\x8c\x88\x09\x2a\xc2\x85\xbe\x87\x8a\x88\x09\x9e\x23\x94\x2c\x16\xe7\x1b\x65\x12\xc6\xcc\x28\x99\x57\x5c\x72\xed\xfb\xc9\xe9\x24\x0e\x24\xb7\xe2\x9d\xb8\xbb\x2c\x94\x2b\x7e\xa0\x3a\xa1\x95\xf7\x0f\x68\x03\x72\x2b\x76\xe2\x6d\xf9\x2a\x2c\x66\x06\x9d\x08\x72\xc3\xa7\xdc\xdd\xbd\x80\x3e\x90\x3c\x82\x0b\x4f\x2f\x1b\x38\xcc\x4f\xcb\x55\x8e\x92\xf3\xd3\xa2\xe4\xfc\xb8\xfe\x0c\x00\x00\xff\xff\x3d\x59\xfe\x70\x6d\x05\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1389, mode: os.FileMode(420), modTime: time.Unix(1470413379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x54\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x4c\x54\x03\x4b\xc7\x2e\x95\xbd\xd6\x10\x8a\x62\xb1\x05\x02\x24\x45\x51\x17\xb9\x38\x5b\x80\xa6\xc6\x12\x1b\x6a\xc8\xf2\xc3\x1f\x88\xf7\xbf\x17\xa4\x24\x4b\x49\x0e\x86\x48\xce\xe3\x9b\xf7\x66\x86\x2e\xdf\x42\xa3\xcd\x41\x68\x58\x6e\x84\x44\x78\x5b\x2e\x16\x27\xe1\x00\x6b\x15\x8c\x83\x0a\x84\x44\x9e\x36\xac\xe8\x8f\x8a\xd5\x76\xd1\xaf\xb8\xc7\xb0\x6b\xcd\xf9\x4f\xa7\x28\x7c\x14\xae\x51\xc4\x8e\x42\x7b\x9c\x10\xcb\x83\x36\xf2\xcb\x4e\x3a\xa3\xb5\xa2\x06\x2a\x78\x4f\x47\x45\x2a\x5c\xe7\x24\x7f\xb7\xd8\x21\x2b\x84\xc4\x32\xa4\x65\xd9\xa8\xd0\xc6\xc3\xb7\x99\x7e\x8b\xc1\xf4\x44\xcf\xf9\xec\x3d\x05\xf3\x49\xe1\x99\x05\x17\x53\xc6\xac\x5a\x58\x9b\x24\x53\x13\xb5\x70\xbc\x33\x75\xd4\xc8\x1e\xce\x78\xb0\xce\xc8\x87\x0d\xec\x5f\x46\xa4\x43\xaa\xd1\x7d\x30\x4d\x83\xc9\xe5\x31\x92\x0c\xca\x10\xab\x45\x10\x2b\xf8\xba\x00\x48\x28\x82\xea\x1b\x24\x27\xb8\xdd\xe0\xdd\x76\x08\xeb\xf1\x7a\x6d\x64\xec\x90\x02\xff\x2f\xa2\xbb\xee\x50\xa3\x0c\xc6\xb1\xe2\xa7\x1e\x91\x9c\x00\x9c\x5b\xa5\xb1\x97\x9b\x13\xf4\x1c\x5d\xba\x2e\x82\xe0\x1f\x4c\xb3\xa7\x97\x6d\x0e\xa8\x23\x7b\xd3\xad\xe0\xe0\x50\x7c\xe9\x4f\x68\xbd\xbe\x87\x3a\xbe\xec\x45\x61\xbd\x02\x69\x28\x28\x8a\xb8\xbd\x33\x7a\x2b\x68\xae\x49\x3a\x14\x01\x9f\x35\xa6\x1d\x2b\x52\xb8\x17\x04\x19\xca\x03\x5e\xc2\x93\xa1\x80\x14\xa0\x82\x8e\x1f\x66\x31\xa9\x85\xf7\x7f\x88\x0e\x73\xc4\xf6\x91\xde\x14\x17\xd6\x22\xd5\x4f\xad\xd2\x35\x4b\xe0\x81\x73\xa6\x0e\x2a\x48\x76\xd3\xf9\xeb\x02\xbe\xaf\x64\x05\xb4\x5d\xbc\x6e\x17\x0b\x61\x2d\x77\x91\xd8\xbd\x09\x4b\x67\x4c\xd8\x49\x63\x71\x6a\x85\x87\x0a\xce\x8a\x6a\x73\xe6\x29\x0a\x15\x4c\xa8\xb1\x1f\x8a\x6c\x0c\x09\xe8\xf9\x7d\xf9\xf5\x35\x45\xcb\xd2\xa3\x3b\xa1\xcb\xa5\x1e\xd0\xd1\x69\xa8\x40\x1b\x29\x52\x52\x6e\x45\x68\x49\x74\xc8\x1d\x5a\x2d\x24\xb2\x72\xff\xcf\xe7\xf2\x65\xbd\x2c\x37\x45\xb1\x82\x35\x14\xfe\x4a\xb2\x18\x73\x25\xa2\x9c\x69\x58\xf4\x79\x52\xe4\x04\x15\x9c\x50\x9b\x0b\xf7\x1e\x59\x74\x7a\x93\xc1\xb9\x3c\x27\x6e\x28\xda\x5a\x04\x9c\x0f\xdd\x38\x0f\x9e\x2f\x85\xb5\xfa\xca\x86\x52\xce\x0b\xc6\xee\x1c\x83\x21\x1b\x03\x1c\x95\xc6\x3c\x01\x48\xc1\x83\xa2\x60\x86\x87\x3b\x5a\xcc\xa9\x9e\xc7\xb7\xfc\x43\xc2\x51\x6e\x1e\xc0\xdf\x95\x46\xbf\xef\x0b\xc7\x13\xf3\x4b\x1a\xf6\xa2\x98\x26\x4b\x46\x97\x68\x86\x47\xd9\x60\xf8\x24\x74\xc4\x51\xad\x3a\xb2\x0c\x78\x53\x55\x70\x5a\xe5\x23\x80\xe9\x01\xf7\xd8\xd3\x06\x7e\x7e\x9c\xdb\x68\x05\xd5\xc9\x44\x2b\xa8\x41\xbf\xc8\x45\x38\x8b\x20\x5b\x56\x64\x55\x4f\x86\x8e\xaa\x19\x3e\xd1\xe5\x5e\x65\xa5\xc5\x66\xf2\x93\xd4\xfa\xa9\x8a\x79\x9b\xfc\xe6\xef\xed\x06\xfb\xe9\x5d\x0d\x51\xae\x91\x9a\xd0\x42\x55\x55\xf0\x38\xde\x04\x98\xb9\xcf\xcd\xcd\xd8\xfd\xbb\xe1\x7a\x1a\xe2\xd7\x2c\x7e\x12\x39\xbb\xf1\xbd\xa2\x91\x36\xbd\xe6\x7e\xef\x30\x44\x47\x53\x41\xf1\x92\x06\xb9\xfc\xcc\x59\x30\x9d\xbe\xfd\xeb\x0d\xdd\xae\xa2\xd3\x37\xdf\xae\x96\x25\x0f\xe8\xc3\xc0\xf4\x2b\xfc\x85\xcd\xf3\xc5\xf2\xe5\x23\xfc\x02\x0f\x8a\xd4\x43\x4f\x33\x35\x63\x87\xde\xe7\xe6\xa6\x6a\x7f\x34\xf5\xf0\x97\xda\x99\x1a\xcb\x62\x8d\x97\x30\xf4\x69\x3e\x14\x7d\xef\x92\xa7\xf4\xfb\x3f\x00\x00\xff\xff\x55\xf0\x2e\x1e\x0d\x06\x00\x00")

func jsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_jsAppJs,
		"js/app.js",
	)
}

func jsAppJs() (*asset, error) {
	bytes, err := jsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/app.js", size: 1549, mode: os.FileMode(420), modTime: time.Unix(1470453870, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/app.css": cssAppCss,
	"index.html": indexHtml,
	"js/app.js": jsAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"app.css": &bintree{cssAppCss, map[string]*bintree{}},
	}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"js": &bintree{nil, map[string]*bintree{
		"app.js": &bintree{jsAppJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

